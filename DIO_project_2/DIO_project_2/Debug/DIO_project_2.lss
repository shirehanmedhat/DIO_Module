
DIO_project_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000366  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab3  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006eb  00000000  00000000  00000f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000074d  00000000  00000000  00001626  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fd  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000866  00000000  00000000  00002309  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002b6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  64:	0c 94 b1 01 	jmp	0x362	; 0x362 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_enumSetPinConfig>:
		}
		
	}
	
	return DIO_ErrorState;
}
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_enumSetPinConfig+0x6>
  70:	ee c0       	rjmp	.+476    	; 0x24e <DIO_enumSetPinConfig+0x1e2>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_enumSetPinConfig+0xc>
  76:	ed c0       	rjmp	.+474    	; 0x252 <DIO_enumSetPinConfig+0x1e6>
  78:	81 30       	cpi	r24, 0x01	; 1
  7a:	09 f4       	brne	.+2      	; 0x7e <DIO_enumSetPinConfig+0x12>
  7c:	40 c0       	rjmp	.+128    	; 0xfe <DIO_enumSetPinConfig+0x92>
  7e:	38 f0       	brcs	.+14     	; 0x8e <DIO_enumSetPinConfig+0x22>
  80:	82 30       	cpi	r24, 0x02	; 2
  82:	09 f4       	brne	.+2      	; 0x86 <DIO_enumSetPinConfig+0x1a>
  84:	74 c0       	rjmp	.+232    	; 0x16e <DIO_enumSetPinConfig+0x102>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	09 f4       	brne	.+2      	; 0x8c <DIO_enumSetPinConfig+0x20>
  8a:	a9 c0       	rjmp	.+338    	; 0x1de <DIO_enumSetPinConfig+0x172>
  8c:	e4 c0       	rjmp	.+456    	; 0x256 <DIO_enumSetPinConfig+0x1ea>
  8e:	41 30       	cpi	r20, 0x01	; 1
  90:	91 f0       	breq	.+36     	; 0xb6 <DIO_enumSetPinConfig+0x4a>
  92:	18 f0       	brcs	.+6      	; 0x9a <DIO_enumSetPinConfig+0x2e>
  94:	42 30       	cpi	r20, 0x02	; 2
  96:	11 f1       	breq	.+68     	; 0xdc <DIO_enumSetPinConfig+0x70>
  98:	e0 c0       	rjmp	.+448    	; 0x25a <DIO_enumSetPinConfig+0x1ee>
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_enumSetPinConfig+0x38>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_enumSetPinConfig+0x34>
  a8:	2a b3       	in	r18, 0x1a	; 26
  aa:	82 2b       	or	r24, r18
  ac:	9a b3       	in	r25, 0x1a	; 26
  ae:	89 2b       	or	r24, r25
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	08 95       	ret
  b6:	2a b3       	in	r18, 0x1a	; 26
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_enumSetPinConfig+0x56>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_enumSetPinConfig+0x52>
  c6:	38 2f       	mov	r19, r24
  c8:	30 95       	com	r19
  ca:	23 23       	and	r18, r19
  cc:	2a bb       	out	0x1a, r18	; 26
  ce:	2b b3       	in	r18, 0x1b	; 27
  d0:	82 2b       	or	r24, r18
  d2:	9b b3       	in	r25, 0x1b	; 27
  d4:	89 2b       	or	r24, r25
  d6:	8b bb       	out	0x1b, r24	; 27
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	08 95       	ret
  dc:	2a b3       	in	r18, 0x1a	; 26
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_enumSetPinConfig+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_enumSetPinConfig+0x78>
  ec:	80 95       	com	r24
  ee:	92 2f       	mov	r25, r18
  f0:	98 23       	and	r25, r24
  f2:	9a bb       	out	0x1a, r25	; 26
  f4:	9b b3       	in	r25, 0x1b	; 27
  f6:	89 23       	and	r24, r25
  f8:	8b bb       	out	0x1b, r24	; 27
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	08 95       	ret
  fe:	41 30       	cpi	r20, 0x01	; 1
 100:	91 f0       	breq	.+36     	; 0x126 <DIO_enumSetPinConfig+0xba>
 102:	18 f0       	brcs	.+6      	; 0x10a <DIO_enumSetPinConfig+0x9e>
 104:	42 30       	cpi	r20, 0x02	; 2
 106:	11 f1       	breq	.+68     	; 0x14c <DIO_enumSetPinConfig+0xe0>
 108:	aa c0       	rjmp	.+340    	; 0x25e <DIO_enumSetPinConfig+0x1f2>
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_enumSetPinConfig+0xa8>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_enumSetPinConfig+0xa4>
 118:	27 b3       	in	r18, 0x17	; 23
 11a:	82 2b       	or	r24, r18
 11c:	97 b3       	in	r25, 0x17	; 23
 11e:	89 2b       	or	r24, r25
 120:	87 bb       	out	0x17, r24	; 23
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	08 95       	ret
 126:	27 b3       	in	r18, 0x17	; 23
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_enumSetPinConfig+0xc6>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_enumSetPinConfig+0xc2>
 136:	38 2f       	mov	r19, r24
 138:	30 95       	com	r19
 13a:	23 23       	and	r18, r19
 13c:	27 bb       	out	0x17, r18	; 23
 13e:	28 b3       	in	r18, 0x18	; 24
 140:	82 2b       	or	r24, r18
 142:	98 b3       	in	r25, 0x18	; 24
 144:	89 2b       	or	r24, r25
 146:	88 bb       	out	0x18, r24	; 24
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	08 95       	ret
 14c:	27 b3       	in	r18, 0x17	; 23
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_enumSetPinConfig+0xec>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_enumSetPinConfig+0xe8>
 15c:	80 95       	com	r24
 15e:	92 2f       	mov	r25, r18
 160:	98 23       	and	r25, r24
 162:	97 bb       	out	0x17, r25	; 23
 164:	98 b3       	in	r25, 0x18	; 24
 166:	89 23       	and	r24, r25
 168:	88 bb       	out	0x18, r24	; 24
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	08 95       	ret
 16e:	41 30       	cpi	r20, 0x01	; 1
 170:	91 f0       	breq	.+36     	; 0x196 <DIO_enumSetPinConfig+0x12a>
 172:	18 f0       	brcs	.+6      	; 0x17a <DIO_enumSetPinConfig+0x10e>
 174:	42 30       	cpi	r20, 0x02	; 2
 176:	11 f1       	breq	.+68     	; 0x1bc <DIO_enumSetPinConfig+0x150>
 178:	74 c0       	rjmp	.+232    	; 0x262 <DIO_enumSetPinConfig+0x1f6>
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_enumSetPinConfig+0x118>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_enumSetPinConfig+0x114>
 188:	24 b3       	in	r18, 0x14	; 20
 18a:	82 2b       	or	r24, r18
 18c:	94 b3       	in	r25, 0x14	; 20
 18e:	89 2b       	or	r24, r25
 190:	84 bb       	out	0x14, r24	; 20
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	08 95       	ret
 196:	24 b3       	in	r18, 0x14	; 20
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_enumSetPinConfig+0x136>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_enumSetPinConfig+0x132>
 1a6:	38 2f       	mov	r19, r24
 1a8:	30 95       	com	r19
 1aa:	23 23       	and	r18, r19
 1ac:	24 bb       	out	0x14, r18	; 20
 1ae:	25 b3       	in	r18, 0x15	; 21
 1b0:	82 2b       	or	r24, r18
 1b2:	95 b3       	in	r25, 0x15	; 21
 1b4:	89 2b       	or	r24, r25
 1b6:	85 bb       	out	0x15, r24	; 21
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	08 95       	ret
 1bc:	24 b3       	in	r18, 0x14	; 20
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_enumSetPinConfig+0x15c>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_enumSetPinConfig+0x158>
 1cc:	80 95       	com	r24
 1ce:	92 2f       	mov	r25, r18
 1d0:	98 23       	and	r25, r24
 1d2:	94 bb       	out	0x14, r25	; 20
 1d4:	95 b3       	in	r25, 0x15	; 21
 1d6:	89 23       	and	r24, r25
 1d8:	85 bb       	out	0x15, r24	; 21
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	08 95       	ret
 1de:	41 30       	cpi	r20, 0x01	; 1
 1e0:	91 f0       	breq	.+36     	; 0x206 <DIO_enumSetPinConfig+0x19a>
 1e2:	18 f0       	brcs	.+6      	; 0x1ea <DIO_enumSetPinConfig+0x17e>
 1e4:	42 30       	cpi	r20, 0x02	; 2
 1e6:	11 f1       	breq	.+68     	; 0x22c <DIO_enumSetPinConfig+0x1c0>
 1e8:	3e c0       	rjmp	.+124    	; 0x266 <DIO_enumSetPinConfig+0x1fa>
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_enumSetPinConfig+0x188>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_enumSetPinConfig+0x184>
 1f8:	21 b3       	in	r18, 0x11	; 17
 1fa:	82 2b       	or	r24, r18
 1fc:	91 b3       	in	r25, 0x11	; 17
 1fe:	89 2b       	or	r24, r25
 200:	81 bb       	out	0x11, r24	; 17
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	08 95       	ret
 206:	21 b3       	in	r18, 0x11	; 17
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_enumSetPinConfig+0x1a6>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_enumSetPinConfig+0x1a2>
 216:	38 2f       	mov	r19, r24
 218:	30 95       	com	r19
 21a:	23 23       	and	r18, r19
 21c:	21 bb       	out	0x11, r18	; 17
 21e:	22 b3       	in	r18, 0x12	; 18
 220:	82 2b       	or	r24, r18
 222:	92 b3       	in	r25, 0x12	; 18
 224:	89 2b       	or	r24, r25
 226:	82 bb       	out	0x12, r24	; 18
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	08 95       	ret
 22c:	21 b3       	in	r18, 0x11	; 17
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_enumSetPinConfig+0x1cc>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_enumSetPinConfig+0x1c8>
 23c:	80 95       	com	r24
 23e:	92 2f       	mov	r25, r18
 240:	98 23       	and	r25, r24
 242:	91 bb       	out	0x11, r25	; 17
 244:	92 b3       	in	r25, 0x12	; 18
 246:	89 23       	and	r24, r25
 248:	82 bb       	out	0x12, r24	; 18
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	08 95       	ret
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	08 95       	ret
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	08 95       	ret
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	08 95       	ret
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	08 95       	ret
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	08 95       	ret
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	08 95       	ret
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	08 95       	ret

0000026a <DIO_enumReadState>:

DIO_enumError_t DIO_enumReadState(DIO_enumPorts_t Copy_enumPortNum,DIO_enumPins_t Copy_enumPinNum,DIO_enumLogicState_t* Add_Pu8PinValue)
{
	DIO_enumError_t DIO_ErrorState = NOK;
	
	if (  ( ( (Copy_enumPortNum >= PORTA_Choice ) && (Copy_enumPortNum <= PORTD_Choice) )  && ( ( Copy_enumPinNum >= PIN0 )  && (Copy_enumPinNum <= PIN7 ) ) ))
 26a:	84 30       	cpi	r24, 0x04	; 4
 26c:	d0 f5       	brcc	.+116    	; 0x2e2 <DIO_enumReadState+0x78>
 26e:	68 30       	cpi	r22, 0x08	; 8
 270:	d0 f5       	brcc	.+116    	; 0x2e6 <DIO_enumReadState+0x7c>
	{
		DIO_ErrorState = OK;
		switch (Copy_enumPortNum)
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	91 f0       	breq	.+36     	; 0x29a <DIO_enumReadState+0x30>
 276:	28 f0       	brcs	.+10     	; 0x282 <DIO_enumReadState+0x18>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	d9 f0       	breq	.+54     	; 0x2b2 <DIO_enumReadState+0x48>
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	29 f1       	breq	.+74     	; 0x2ca <DIO_enumReadState+0x60>
 280:	34 c0       	rjmp	.+104    	; 0x2ea <DIO_enumReadState+0x80>
		{
			case PORTA_Choice:
			*Add_Pu8PinValue = Get_Bit (PINA , Copy_enumPinNum);
 282:	89 b3       	in	r24, 0x19	; 25
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_enumReadState+0x22>
 288:	95 95       	asr	r25
 28a:	87 95       	ror	r24
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_enumReadState+0x1e>
 290:	81 70       	andi	r24, 0x01	; 1
 292:	fa 01       	movw	r30, r20
 294:	80 83       	st	Z, r24
{
	DIO_enumError_t DIO_ErrorState = NOK;
	
	if (  ( ( (Copy_enumPortNum >= PORTA_Choice ) && (Copy_enumPortNum <= PORTD_Choice) )  && ( ( Copy_enumPinNum >= PIN0 )  && (Copy_enumPinNum <= PIN7 ) ) ))
	{
		DIO_ErrorState = OK;
 296:	81 e0       	ldi	r24, 0x01	; 1
		switch (Copy_enumPortNum)
		{
			case PORTA_Choice:
			*Add_Pu8PinValue = Get_Bit (PINA , Copy_enumPinNum);
			break;
 298:	08 95       	ret
			case PORTB_Choice:
			*Add_Pu8PinValue = Get_Bit (PINB , Copy_enumPinNum);
 29a:	86 b3       	in	r24, 0x16	; 22
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_enumReadState+0x3a>
 2a0:	95 95       	asr	r25
 2a2:	87 95       	ror	r24
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_enumReadState+0x36>
 2a8:	81 70       	andi	r24, 0x01	; 1
 2aa:	fa 01       	movw	r30, r20
 2ac:	80 83       	st	Z, r24
{
	DIO_enumError_t DIO_ErrorState = NOK;
	
	if (  ( ( (Copy_enumPortNum >= PORTA_Choice ) && (Copy_enumPortNum <= PORTD_Choice) )  && ( ( Copy_enumPinNum >= PIN0 )  && (Copy_enumPinNum <= PIN7 ) ) ))
	{
		DIO_ErrorState = OK;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
			case PORTA_Choice:
			*Add_Pu8PinValue = Get_Bit (PINA , Copy_enumPinNum);
			break;
			case PORTB_Choice:
			*Add_Pu8PinValue = Get_Bit (PINB , Copy_enumPinNum);
			break;
 2b0:	08 95       	ret
			case PORTC_Choice:
			*Add_Pu8PinValue = Get_Bit (PINC , Copy_enumPinNum);
 2b2:	83 b3       	in	r24, 0x13	; 19
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_enumReadState+0x52>
 2b8:	95 95       	asr	r25
 2ba:	87 95       	ror	r24
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_enumReadState+0x4e>
 2c0:	81 70       	andi	r24, 0x01	; 1
 2c2:	fa 01       	movw	r30, r20
 2c4:	80 83       	st	Z, r24
{
	DIO_enumError_t DIO_ErrorState = NOK;
	
	if (  ( ( (Copy_enumPortNum >= PORTA_Choice ) && (Copy_enumPortNum <= PORTD_Choice) )  && ( ( Copy_enumPinNum >= PIN0 )  && (Copy_enumPinNum <= PIN7 ) ) ))
	{
		DIO_ErrorState = OK;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
			case PORTB_Choice:
			*Add_Pu8PinValue = Get_Bit (PINB , Copy_enumPinNum);
			break;
			case PORTC_Choice:
			*Add_Pu8PinValue = Get_Bit (PINC , Copy_enumPinNum);
			break;
 2c8:	08 95       	ret
			case PORTD_Choice:
			*Add_Pu8PinValue = Get_Bit (PIND , Copy_enumPinNum);
 2ca:	80 b3       	in	r24, 0x10	; 16
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_enumReadState+0x6a>
 2d0:	95 95       	asr	r25
 2d2:	87 95       	ror	r24
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_enumReadState+0x66>
 2d8:	81 70       	andi	r24, 0x01	; 1
 2da:	fa 01       	movw	r30, r20
 2dc:	80 83       	st	Z, r24
{
	DIO_enumError_t DIO_ErrorState = NOK;
	
	if (  ( ( (Copy_enumPortNum >= PORTA_Choice ) && (Copy_enumPortNum <= PORTD_Choice) )  && ( ( Copy_enumPinNum >= PIN0 )  && (Copy_enumPinNum <= PIN7 ) ) ))
	{
		DIO_ErrorState = OK;
 2de:	81 e0       	ldi	r24, 0x01	; 1
			case PORTC_Choice:
			*Add_Pu8PinValue = Get_Bit (PINC , Copy_enumPinNum);
			break;
			case PORTD_Choice:
			*Add_Pu8PinValue = Get_Bit (PIND , Copy_enumPinNum);
			break;
 2e0:	08 95       	ret
}


DIO_enumError_t DIO_enumReadState(DIO_enumPorts_t Copy_enumPortNum,DIO_enumPins_t Copy_enumPinNum,DIO_enumLogicState_t* Add_Pu8PinValue)
{
	DIO_enumError_t DIO_ErrorState = NOK;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	08 95       	ret
	
	if (  ( ( (Copy_enumPortNum >= PORTA_Choice ) && (Copy_enumPortNum <= PORTD_Choice) )  && ( ( Copy_enumPinNum >= PIN0 )  && (Copy_enumPinNum <= PIN7 ) ) ))
	{
		DIO_ErrorState = OK;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
		}
		
		
	}
	return DIO_ErrorState;
}
 2ec:	08 95       	ret

000002ee <main>:
#define F_CPU 1000000UL
#include <util/delay.h>


int main(void)
{
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	1f 92       	push	r1
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
	DIO_enumLogicState_t read = HIGH  , test =0;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	89 83       	std	Y+1, r24	; 0x01
	/* Replace with your application code */
	/*Set PA0, PA1 , PA2 , PA3 as outputs*/
	DIO_enumSetPinConfig (PORTA_Choice , PIN0 , OUTPUT);
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_enumSetPinConfig>
	DIO_enumSetPinConfig (PORTA_Choice , PIN1 , OUTPUT);
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_enumSetPinConfig>
	DIO_enumSetPinConfig (PORTA_Choice , PIN2 , OUTPUT);
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_enumSetPinConfig>
	DIO_enumSetPinConfig (PORTA_Choice , PIN3 , OUTPUT);
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	63 e0       	ldi	r22, 0x03	; 3
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_enumSetPinConfig>
	/*Set PB1 as an input*/
	DIO_enumSetPinConfig (PORTB_Choice , PIN1  , INPUT_PULLUP);
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_enumSetPinConfig>
		u8  counter =0;
 32e:	10 e0       	ldi	r17, 0x00	; 0
		while (1)
		{
			    DIO_enumReadState (PORTB_Choice , PIN1 , &read);
 330:	ae 01       	movw	r20, r28
 332:	4f 5f       	subi	r20, 0xFF	; 255
 334:	5f 4f       	sbci	r21, 0xFF	; 255
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_enumReadState>

			/*READ the switch*/
			if (!read)
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	81 11       	cpse	r24, r1
 342:	f6 cf       	rjmp	.-20     	; 0x330 <main+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 344:	83 e2       	ldi	r24, 0x23	; 35
 346:	94 ef       	ldi	r25, 0xF4	; 244
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <main+0x5a>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <main+0x60>
 34e:	00 00       	nop
			{
				/*Delay to hang the cpu for 150 ms*/
				_delay_ms(250);
				/*reread to check if it's a real press*/
				if (!read)
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	81 11       	cpse	r24, r1
 354:	ed cf       	rjmp	.-38     	; 0x330 <main+0x42>
				{
					if (counter==16) counter=0;
 356:	10 31       	cpi	r17, 0x10	; 16
 358:	09 f4       	brne	.+2      	; 0x35c <main+0x6e>
 35a:	10 e0       	ldi	r17, 0x00	; 0
					counter++;
 35c:	1f 5f       	subi	r17, 0xFF	; 255
					PORTA = counter;
 35e:	1b bb       	out	0x1b, r17	; 27
 360:	e7 cf       	rjmp	.-50     	; 0x330 <main+0x42>

00000362 <_exit>:
 362:	f8 94       	cli

00000364 <__stop_program>:
 364:	ff cf       	rjmp	.-2      	; 0x364 <__stop_program>
